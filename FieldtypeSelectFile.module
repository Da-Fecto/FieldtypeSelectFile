<?php

/**
 * ProcessWire files in folder Fieldtype
 *
 * Â©2014 Martijn Geerts
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeSelectFile extends FieldtypeText {

    public static function getModuleInfo() {
        return array(
            'title' => __('Fieldtype select file'),
            'version' => 101,
            'summary' => __('Fieldtype that stores a file or folder.'),
            'author' => 'Martijn Geerts',
            'href' => 'https://processwire.com/talk/topic/6377-fieldtypeselectfile-inputfieldselectfile/',
            'installs' => 'InputfieldSelectFile',
            );
    }

    public function init() {
        parent::init();
        $this->allowTextFormatters(false);
    }

    /**
     * Sanitize value for storage
     *
     */
    public function sanitizeValue(Page $page, Field $field, $value) {
        $file = $this->config->paths->templates . ltrim($field->folderPath, '/') . $value;
        if(is_file($file) || is_dir($file)) return $value;
        return '';
    }

    // Sets folderPath to the inputfield
    public function getInputfield(Page $page, Field $field) {
        $inputfield = $this->modules->get('InputfieldSelectFile');
        $inputfield->set('folderPath', $field->folderPath);
        $inputfield->set('fileExt', $field->fileExt);
        $inputfield->set('hideFiles', $field->hideFiles);
        $inputfield->set('hideFolders', $field->hideFolders);
        $inputfield->set('sort', $field->sort);
        return $inputfield;
    }

    // details
    public function ___getConfigInputfields(Field $field) {

        $error = false;
        if ($field->folderPath) {
            $folder = $this->config->paths->templates . ltrim($field->folderPath, '/');
            if (!is_dir($folder)) {
                $path = $this->config->urls->templates . ltrim($field->folderPath, '/');
                $error = sprintf($this->_("Folder %s doesn't exist."), $path);
            }
        }

        $inputfields = parent::___getConfigInputfields($field);

        $f = $this->modules->get('InputfieldText');
        $f->attr('name', 'folderPath');
        $f->label = $this->_("The folder containing the files so select.");
        $f->attr('value', $field->folderPath);
        $f->description = $this->_("Relative to the templates folder.");
        $f->notes = $this->_("When the files are located in /site/templates/scripts/, type: scripts/");
        $f->getErrors(true);
        if ($error) $f->error($error);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'fileExt');
        $f->label = $this->_("Hide File Extension");
        $f->attr('autocheck', 1);
        $f->attr('uncheckedValue', 0);
        $f->attr('checkedValue', 1);
        $f->columnWidth = 25;
        $f->attr('value', $field->fileExt);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'hideFiles');
        $f->label = $this->_("Hide Files");
        $f->attr('autocheck', 1);
        $f->attr('uncheckedValue', 0);
        $f->attr('checkedValue', 1);
        $f->columnWidth = 25;
        $f->attr('value', $field->hideFiles);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'hideFolders');
        $f->label = $this->_("Hide Folders");
        $f->attr('autocheck', 1);
        $f->attr('uncheckedValue', 0);
        $f->attr('checkedValue', 1);
        $f->columnWidth = 25;
        $f->attr('value', $field->hideFolders);
        $inputfields->add($f);

        $f = $this->modules->get('InputfieldCheckbox');
        $f->attr('name', 'sort');
        $f->label = $this->_("Natural Sort (Select options)");
        $f->attr('autocheck', 1);
        $f->attr('uncheckedValue', 0);
        $f->attr('checkedValue', 1);
        $f->columnWidth = 25;
        $f->attr('value', $field->sort);
        $inputfields->add($f);

        return $inputfields;
    }
}
