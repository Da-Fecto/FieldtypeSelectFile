<?php

/**
 * An Inputfield for handling files in a folder
 *
 * Â©2014 Martijn Geerts
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */
class InputfieldSelectFile extends InputfieldText {

    public static function getModuleInfo() {
        return array(
            'title' => 'Inputfield select file',
            'version' => 101,
            'summary' => __('Inputfield to select a file or a folder.'),
            'author' => 'Martijn Geerts',
            'href' => 'https://processwire.com/talk/topic/6377-fieldtypeselectfile-inputfieldselectfile/',
            'requires' => 'FieldtypeSelectFile',
            );
    }

    public function __construct() {
        parent::__construct();
    }

    public function ___render() {

        $folder = $this->config->paths->templates . trim(trim($this->folderPath), '/') . "/";
        $array = array();

        if(!is_dir($folder)) {
            $this->error($this->_("Path to files is invalid"));
        } else {
            $array[] = "<option value=''></option>";
            $handle = opendir($folder);
            while (false !== ($entry = readdir($handle))) {

                if (strpos($entry, '.') === 0) continue;
                if (is_file($folder.$entry) && $this->hideFiles) continue;
                if (is_dir($folder.$entry) && $this->hideFolders) continue;
                if (is_file($folder.$entry) && $this->fileExt) {
                    $exploded = explode('.', $entry);
                    array_pop($exploded);
                    $label = implode('.', $exploded);
                } else {
                    $label = $entry;
                }

                $selected = $entry == $this->value ? " selected" : '';
                $array[$label] = "<option value='$entry'$selected>$label</option>";

            }
            closedir($handle);
        }

        if ($this->sort) ksort($array, SORT_NATURAL);

        return "<select name='$this->name'>" . implode('', $array) . "</select>";
    }

    // remove some fields
    public function ___getConfigInputfields() {
        $inputfields = parent::___getConfigInputfields();

        $f = $inputfields->get('stripTags');
        if($f) $inputfields->remove($f);

        $f = $inputfields->get('size');
        if($f) $inputfields->remove($f);

        $f = $inputfields->get('maxlength');
        if($f) $inputfields->remove($f);

        $f = $inputfields->get('placeholder');
        if($f) $inputfields->remove($f);

        $f = $inputfields->get('pattern');
        if($f) $inputfields->remove($f);

        return $inputfields;
    }
}
